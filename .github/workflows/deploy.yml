name: Build and Deploy

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened, labeled]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: ecr-login
      uses: aws-actions/amazon-ecr-login@v2
      with:
        registry-type: private
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Build Docker image
      id: build-image
      run: |
        docker build -t hello-world-app .
        echo "Image built with tag hello-world-app"

    - name: Determine Image Tag and ECR Repository
      id: determine-tag
      run: |
        # Extract labels from pull request
        LABELS_JSON="${{ toJson(github.event.pull_request.labels) }}"

        # Debug: Print raw JSON
        echo "Raw JSON Labels: $LABELS_JSON"

        if [ "$LABELS_JSON" != "null" ] && [ -n "$LABELS_JSON" ]; then
          LABELS=$(echo "$LABELS_JSON" | jq -r '.[] | .name // empty')

          # Debug: Print extracted labels
          echo "Extracted Labels: $LABELS"

          # Initialize IMAGE_TAG and ECR_REPO with default values
          IMAGE_TAG="dev"
          ECR_REPO="dev"

          # Set IMAGE_TAG and ECR_REPO based on label
          if echo "$LABELS" | grep -q 'production'; then
            IMAGE_TAG="latest"
            ECR_REPO="prod"
          elif echo "$LABELS" | grep -q 'development'; then
            IMAGE_TAG="dev"
            ECR_REPO="dev"
          else
            echo "No valid label found, defaulting to 'dev'"
          fi
        else
          echo "No valid labels found or JSON is null, defaulting to 'dev'"
        fi

        # Output the selected values
        echo "IMAGE_TAG=$IMAGE_TAG"
        echo "ECR_REPO=$ECR_REPO"

        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
        echo "ECR_REPO=$ECR_REPO" >> $GITHUB_ENV
      shell: /usr/bin/bash -e {0}
      env:
        AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Tag Docker image
      id: tag-image
      run: |
        # Debug: Print the environment variables
        echo "IMAGE_TAG=${{ env.IMAGE_TAG }}"
        echo "ECR_REPO=${{ env.ECR_REPO }}"

        # Ensure IMAGE_TAG is not empty
        if [ -z "${{ env.IMAGE_TAG }}" ]; then
          echo "IMAGE_TAG is empty. Please check the label extraction step."
          exit 1
        fi

        # Tag the Docker image
        docker tag hello-world-app:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/hello-world-app:${{ env.IMAGE_TAG }}
        echo "Image tagged as ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/hello-world-app:${{ env.IMAGE_TAG }}"
      shell: /usr/bin/bash -e {0}
      env:
        AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        IMAGE_TAG: ${{ env.IMAGE_TAG }}
        ECR_REPO: ${{ env.ECR_REPO }}

    - name: Push Docker image to ECR
      id: push-image
      run: |
        echo "IMAGE_TAG=${{ env.IMAGE_TAG }}"
        echo "ECR_REPO=${{ env.ECR_REPO }}"

        # Ensure IMAGE_TAG is not empty
        if [ -z "${{ env.IMAGE_TAG }}" ]; then
          echo "IMAGE_TAG is empty. Please check the label extraction step."
          exit 1
        fi

        # Push the Docker image
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/hello-world-app:${{ env.IMAGE_TAG }}
      shell: /usr/bin/bash -e {0}
      env:
        AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Deploy to S3
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      run: |
        echo "Deploying to S3 bucket..."
        aws s3 sync ./path/to/static/files s3://${{ secrets.S3_BUCKET_NAME }}/ --delete
        echo "Static website deployed to S3 bucket"
      shell: /usr/bin/bash -e {0}
      env:
        AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
