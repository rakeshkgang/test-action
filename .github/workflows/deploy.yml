name: CI/CD Workflow

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened, labeled]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker image
      id: build-image
      run: |
        docker build -t hello-world-app .
        echo "Image built with tag hello-world-app"

    - name: Run tests
      run: |
        # Add any tests here
        echo "Tests are not defined in this example."

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Determine ECR Repository
      id: determine-ecr
      run: |
        LABEL="${{ github.event.pull_request.labels[0].name }}"
        echo "Label: $LABEL"
        
        if [ "$LABEL" == "production" ]; then
          echo "Using Production ECR"
          echo "ECR_REPO=${{ secrets.PROD_ECR_REPOSITORY }}" >> $GITHUB_ENV
        else
          echo "Using Development ECR"
          echo "ECR_REPO=${{ secrets.DEV_ECR_REPOSITORY }}" >> $GITHUB_ENV
        fi

    - name: Login to Amazon ECR
      id: ecr-login
      run: |
        echo "Logging in to ECR repository"
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REPO }}

    - name: Tag Docker image
      id: tag-image
      run: |
        docker tag hello-world-app:latest ${{ env.ECR_REPO }}:latest
        echo "Image tagged as latest"

    - name: Push Docker image to ECR
      id: push-image
      run: |
        docker push ${{ env.ECR_REPO }}:latest
        echo "Image pushed to ${{ env.ECR_REPO }}:latest"

    - name: Deploy to S3
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      run: |
        aws s3 cp ./deploy/ s3://${{ secrets.S3_BUCKET_NAME }}/ --recursive
        echo "Application deployed to S3 bucket"
